// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package data

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Gemtype string

const (
	GemtypeGreen Gemtype = "green"
	GemtypeBlue  Gemtype = "blue"
	GemtypeRed   Gemtype = "red"
	GemtypeBrown Gemtype = "brown"
	GemtypeWhite Gemtype = "white"
	GemtypeGold  Gemtype = "gold"
)

func (e *Gemtype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gemtype(s)
	case string:
		*e = Gemtype(s)
	default:
		return fmt.Errorf("unsupported scan type for Gemtype: %T", src)
	}
	return nil
}

type NullGemtype struct {
	Gemtype Gemtype
	Valid   bool // Valid is true if Gemtype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGemtype) Scan(value interface{}) error {
	if value == nil {
		ns.Gemtype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gemtype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGemtype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gemtype), nil
}

type Game struct {
	GameID  pgtype.UUID
	HashID  string
	TableID pgtype.UUID
	Game    GameData
}

type Table struct {
	TableID     pgtype.UUID
	DisplayName string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type User struct {
	UserID    pgtype.UUID
	Name      string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type UserHand struct {
	GameID        pgtype.UUID
	UserID        pgtype.UUID
	Nobles        []Noble
	Coins         []Gemtype
	OwnedCards    []Card
	ReservedCards []Card
}

type UserTable struct {
	ID      pgtype.Int8
	UserID  pgtype.UUID
	TableID pgtype.UUID
}
